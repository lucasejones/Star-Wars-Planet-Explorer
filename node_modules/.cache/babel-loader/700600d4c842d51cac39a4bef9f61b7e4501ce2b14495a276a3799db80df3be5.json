{"ast":null,"code":"var _jsxFileName = \"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/PlanetBox.js\",\n  _s = $RefreshSig$();\nimport Button from './Button.js';\nimport FetchedData from './FetchedData.js';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlanetBox(_ref) {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [index, setIndex] = useState(0);\n  const imageRef = useRef();\n  const arrFill = Array.from(Array(data.length - 1)).map((e, i) => i + 1);\n  const indexArrRef = useRef(arrFill);\n  useEffect(() => {\n    console.log('PlanetBox render');\n    imageRef.current.animate({\n      opacity: [0, 1]\n    }, 800);\n  });\n  function indexFromProxyArr(proxyArr, currentIndex) {\n    let newIndex = proxyArr[Math.floor(Math.random() * proxyArr.length)];\n    if (newIndex === currentIndex) {\n      newIndex = indexFromProxyArr(proxyArr, currentIndex);\n    }\n    proxyArr.splice(proxyArr.indexOf(newIndex), 1);\n    return newIndex;\n  }\n  function imageImport(r) {\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace('./', '').split('.')[0]] = r(item);\n    });\n    return images;\n  }\n  function handleClick() {\n    if (indexArrRef.current.length == 0) {\n      indexArrRef.current = Array.from(Array(10).keys());\n    }\n    let newIndex = indexFromProxyArr(indexArrRef.current, index);\n    setIndex(newIndex);\n    imageRef.current.animate({\n      opacity: [1, 0]\n    }, 800);\n  }\n  const allImages = imageImport(require.context('./images/', false));\n  const planet = data[index];\n  if (planet.name === 'Yavin IV') {\n    planet.name = 'Yavin-IV';\n  }\n\n  // To-Dos:\n  // understand the triggering animation in useffect and how that relates to this idea from useEffect reference: If you’re not trying to synchronize with some external system, you probably don’t need an Effect. (links to \"you might not need an effect\")\n\n  // order of experience:\n  // the page loads\n  // the title, symbol, and a visual cue to click the symbol are shown\n  // the welcome box and planet list with random button appear\n  // clicking the symbol at any time from now on will hide the welcome box\n  // clicking either an item from the planetlist or the button will display the planetbox underneath\n\n  //I thought it would be more interactive to have the user click the rebel symbol to reveal some instructions and planet options. From there, when they click, they will see whatever planet matches their selection. Also, from then on, by clicking the same rebel symbol button, it will hide/unhide the welcome box but leave the planet list and planet box.\n\n  // click once to display welcome box and list (needs random button too)\n  // click again to hide/unhide the welcome box as many times as you like, but keep planet list and random button (and planetbox if shown)\n  // click a planet from list or from the random button to show planetbox\n\n  // make a component that allows navigation to a specific planet that essentially is a horizontal list of navigable planet names above the planet box. (1)\n\n  // hide the planetlist and planetbox until the user clicks the rebel symbol\n  // add some visual to encourage this action\n  // first, just display the welcome box and the list\n  // give an option to roll up the welcome box or roll down at any time\n  // when they click a planet from the list (or the random planet button which will also be moved up there) the planetbox will appear and function normally from there.\n\n  // check out animation method alternatives (2)\n\n  // assign some slight and themed bg color swap depending on planet (3)\n\n  // fix all the unstructured css names (4)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planet-box\",\n    ref: imageRef\n    // onClick={onClick}\n    ,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: allImages[planet.name],\n      alt: 'a depiction of ' + allImages[planet.name],\n      className: \"planet-box-image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"planet-title\",\n      children: planet.name === 'Yavin-IV' ? 'Yavin-iv' : planet.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(FetchedData, {\n      currentPlanet: planet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-planet\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        handleClick: handleClick,\n        id: \"new-planet-text\",\n        text: \"Visit Random Planet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 3\n  }, this);\n}\n_s(PlanetBox, \"qWY0Uxqe+/7ppWegVzrlaabx0Q0=\");\n_c = PlanetBox;\nvar _c;\n$RefreshReg$(_c, \"PlanetBox\");","map":{"version":3,"names":["Button","FetchedData","useState","useEffect","useRef","PlanetBox","data","index","setIndex","imageRef","arrFill","Array","from","length","map","e","i","indexArrRef","console","log","current","animate","opacity","indexFromProxyArr","proxyArr","currentIndex","newIndex","Math","floor","random","splice","indexOf","imageImport","r","images","keys","forEach","item","replace","split","handleClick","allImages","require","context","planet","name"],"sources":["/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/PlanetBox.js"],"sourcesContent":["import Button from './Button.js';\nimport FetchedData from './FetchedData.js';\nimport { useState, useEffect, useRef } from 'react';\n\n\nexport default function PlanetBox({ data }) {\n\tconst [index, setIndex] = useState(0)\n\tconst imageRef = useRef();\n\tconst arrFill = Array.from(Array(data.length - 1)).map((e, i) => i + 1)\n\tconst indexArrRef = useRef(arrFill)\n\n\tuseEffect(() => {\n\t\tconsole.log('PlanetBox render')\n\n\t\timageRef.current.animate(\n\t\t{\n\t\t\topacity: [0, 1]\n\t\t}, 800)\n\t})\n\n\n\tfunction indexFromProxyArr(proxyArr, currentIndex) {\n\t\tlet newIndex = proxyArr[Math.floor(Math.random() * proxyArr.length)]\n\t\t\n\t\tif (newIndex === currentIndex) {\n\t\t\tnewIndex = indexFromProxyArr(proxyArr, currentIndex)\n\t\t}\n\t\tproxyArr.splice(proxyArr.indexOf(newIndex), 1)\n\n\t\treturn newIndex\n\t}\n\t\n\n\tfunction imageImport(r) {\n\t\tlet images = {}\n\t\tr.keys().forEach((item, index) => {\n\t\t\timages[item.replace('./', '').split('.')[0]] = r(item);\n\t\t});\n\t\treturn images\n\t}\n     \n\n\tfunction handleClick() {\n\t\tif (indexArrRef.current.length == 0) {\n\t\t\tindexArrRef.current = Array.from(Array(10).keys())\n\t\t}\n\n\t\tlet newIndex = indexFromProxyArr(indexArrRef.current, index)\n\t\tsetIndex(newIndex)\n\n\t\timageRef.current.animate(\n\t\t\t{\n\t\t\t\topacity: [1, 0]\n\t\t\t}, 800)\n\t}\n\n\tconst allImages = imageImport(require.context('./images/', false))\n\tconst planet = data[index]\n\n\tif (planet.name === 'Yavin IV') {\n\t\tplanet.name = 'Yavin-IV' \n\t} \n\n\t// To-Dos:\n\t\t// understand the triggering animation in useffect and how that relates to this idea from useEffect reference: If you’re not trying to synchronize with some external system, you probably don’t need an Effect. (links to \"you might not need an effect\")\n\n\t// order of experience:\n\t\t// the page loads\n\t\t// the title, symbol, and a visual cue to click the symbol are shown\n\t\t// the welcome box and planet list with random button appear\n\t\t// clicking the symbol at any time from now on will hide the welcome box\n\t\t// clicking either an item from the planetlist or the button will display the planetbox underneath\n\n\t//I thought it would be more interactive to have the user click the rebel symbol to reveal some instructions and planet options. From there, when they click, they will see whatever planet matches their selection. Also, from then on, by clicking the same rebel symbol button, it will hide/unhide the welcome box but leave the planet list and planet box.\n\n\n\n\n\n\n\t// click once to display welcome box and list (needs random button too)\n\t// click again to hide/unhide the welcome box as many times as you like, but keep planet list and random button (and planetbox if shown)\n\t// click a planet from list or from the random button to show planetbox\n\n\n\n\n\n\n\n\t// make a component that allows navigation to a specific planet that essentially is a horizontal list of navigable planet names above the planet box. (1)\n\n\t// hide the planetlist and planetbox until the user clicks the rebel symbol\n\t\t// add some visual to encourage this action\n\t\t// first, just display the welcome box and the list\n\t\t// give an option to roll up the welcome box or roll down at any time\n\t\t// when they click a planet from the list (or the random planet button which will also be moved up there) the planetbox will appear and function normally from there.\n\n\t// check out animation method alternatives (2)\n\n\t// assign some slight and themed bg color swap depending on planet (3)\n\n\t// fix all the unstructured css names (4)\n\t\n\n\n\treturn(\n\t\t<div className='planet-box'\n\t\t\tref={imageRef}\n\t\t\t// onClick={onClick}\n\t\t> \t\n\t\t\t<img \n\t\t\t\tsrc={allImages[planet.name]} \n\t\t\t\talt={'a depiction of ' + allImages[planet.name]}\n\t\t\t\tclassName='planet-box-image'\n\t\t\t/>\n\t\t\t<h1 className='planet-title'>{planet.name === 'Yavin-IV' ? 'Yavin-iv' : planet.name}</h1>\n\n\t\t\t<FetchedData\n\t\t\t\tcurrentPlanet={planet}\n\t\t\t/>\n\n\t\t\t<div id='new-planet'>\n\t\t\t\t<Button \n\t\t\t\t\thandleClick={handleClick} \n\t\t\t\t\tid='new-planet-text' \n\t\t\t\t\ttext='Visit Random Planet'\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}