{"ast":null,"code":"var _jsxFileName = \"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/quote-machine/src/PlanetBox.js\",\n  _s = $RefreshSig$();\nimport Button from './Button.js';\nimport { useState, useEffect, useRef } from 'react';\n\n// if I'm reading this right, the child receiving the props is not allowed to change those props within itself. only the parent can change the props.\n// maybe by taking care of the refilling logic in the parent component, I can work through this.\n\n// try moving all the logic up to the parent component and see what you can get away with here. I don't think having 1,000 references to props is the right way to be doing things.\n\n//SOLUTION: \n// you shouldn't be trying to change the props values in the child component; focus only on displaying them in the child component. change them in the parent component.\n// the stack overflow here is useful:\n// https://stackoverflow.com/questions/26089532/why-cant-i-update-props-in-react-js\n\n// identify the different visual states:\n// 1. loading (successful fetch should switch to the !loading state)\n// 2. failed load (unsuccessful fetch should switch to loadFailed=true)\n// 3. show the container box (containerShow all the time if loaded)\n// 4. specific image state: (clicking the random planet button should switch the image state off for the current one, and image state on for the new one\n// 4. \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlanetBox(props) {\n  _s();\n  const [planet, setPlanet] = useState(props.getRandomPlanet(props.data));\n  const [isEmpty, setIsEmpty] = useState(false);\n  const imageRef = useRef();\n  useEffect(() => {\n    console.log('child render');\n    imageRef.current.animate({\n      opacity: [0, 1]\n    }, 800);\n    // if (isEmpty) {\n    // \tconsole.log('effect props.data before', props.data)\n    // \tprops.data = props.persistentData\n    // \tconsole.log('effect props.data after', props.data)\n    // }\n  }, [planet]);\n  function getPropertiesAndValues(planetObject) {\n    // preparing the arrays that will be displayed\n\n    var properties = [];\n    var values = [];\n    Object.keys(planetObject).slice(0, -5).map((key, index) => {\n      properties.push(key);\n      values.push(planetObject[key]);\n    });\n    for (let i = 0; i < properties.length; i++) {\n      properties[i] = properties[i].replace(/_/g, ' ');\n    }\n    return [properties, values];\n  }\n  function imageImport(r) {\n    // creating a custom context using require.context\n    // reference here: https://webpack.js.org/guides/dependency-management/#require-context\n\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace('./', '').split('.')[0]] = r(item);\n    });\n    return images;\n  }\n  function handleClick() {\n    setPlanet(props.getRandomPlanet(props.data));\n    if (props.data.length == 0) {\n      console.log('empty!');\n\n      // dynamicArr.current.concat(props.data)\n      // setPlanet(props.getRandomPlanet(.current))\n\n      // console.log('restored remaining planets', dynamicArr.current)\n    }\n\n    imageRef.current.animate({\n      opacity: [1, 0]\n    }, 800);\n  }\n  let planetArr = props.data.slice();\n  console.log(planetArr);\n  console.log('props.data before', props.data);\n  props.updateRemainingPlanets(props.data, planet);\n  console.log('props.data after', props.data);\n  if (planet.name === 'Yavin IV') {\n    planet.name = 'Yavin-IV';\n  }\n  const [propertiesArr, valuesArr] = getPropertiesAndValues(planet);\n  const allImages = imageImport(require.context('./images/', false));\n\n  // To-Dos:\n  // prevent the current planet from loading again (1)\n\n  // make a component that allows navigation to a specific planet that essentially is a horizontal list of navigable planet names above the planet box. (2)\n\n  // assign some slight and themed bg color swap depending on planet (3)\n  // check out animation method alternatives (4)\n\n  // try to get that cool gradient overlay to work (5)\n\n  // fix all the unstructured css names (6)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"planet-box\",\n    ref: imageRef,\n    style: {\n      background: 'radial-gradient(rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.3) 90%)',\n      backgroundImage: 'url(' + allImages[planet.name] + ')',\n      backgroundSize: 'cover'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"planet-title\",\n      children: planet.name === 'Yavin-IV' ? 'Yavin-iv' : planet.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fetched\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fetched-keys\",\n        children: propertiesArr.map(i => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"fetched-item\",\n            children: [i, \":\"]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fetched-values\",\n        children: valuesArr.map(i => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"fetched-item\",\n            children: i\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-planet\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        handleClick: handleClick,\n        id: \"new-planet-text\",\n        text: \"Visit New Planet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 3\n  }, this);\n}\n_s(PlanetBox, \"pvx9ujFNIf5OYAtOQAePxcyPZVo=\");\n_c = PlanetBox;\nexport default PlanetBox;\nvar _c;\n$RefreshReg$(_c, \"PlanetBox\");","map":{"version":3,"names":["Button","useState","useEffect","useRef","PlanetBox","props","planet","setPlanet","getRandomPlanet","data","isEmpty","setIsEmpty","imageRef","console","log","current","animate","opacity","getPropertiesAndValues","planetObject","properties","values","Object","keys","slice","map","key","index","push","i","length","replace","imageImport","r","images","forEach","item","split","handleClick","planetArr","updateRemainingPlanets","name","propertiesArr","valuesArr","allImages","require","context","background","backgroundImage","backgroundSize"],"sources":["/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/quote-machine/src/PlanetBox.js"],"sourcesContent":["import Button from './Button.js';\nimport { useState, useEffect, useRef } from 'react';\n\n// if I'm reading this right, the child receiving the props is not allowed to change those props within itself. only the parent can change the props.\n// maybe by taking care of the refilling logic in the parent component, I can work through this.\n\n// try moving all the logic up to the parent component and see what you can get away with here. I don't think having 1,000 references to props is the right way to be doing things.\n\n//SOLUTION: \n// you shouldn't be trying to change the props values in the child component; focus only on displaying them in the child component. change them in the parent component.\n// the stack overflow here is useful:\n// https://stackoverflow.com/questions/26089532/why-cant-i-update-props-in-react-js\n\n\n// identify the different visual states:\n\t// 1. loading (successful fetch should switch to the !loading state)\n\t// 2. failed load (unsuccessful fetch should switch to loadFailed=true)\n\t// 3. show the container box (containerShow all the time if loaded)\n\t// 4. specific image state: (clicking the random planet button should switch the image state off for the current one, and image state on for the new one\n\t// 4. \n\n\n\nfunction PlanetBox(props) {\n\tconst [planet, setPlanet] = useState(props.getRandomPlanet(props.data))\n\tconst [isEmpty, setIsEmpty] = useState(false)\n\tconst imageRef = useRef();\n\n\n\n\tuseEffect(() => {\n\t\tconsole.log('child render')\n\t\timageRef.current.animate(\n\t\t{\n\t\t\topacity: [0, 1]\n\t\t}, 800)\n\t\t// if (isEmpty) {\n\t\t// \tconsole.log('effect props.data before', props.data)\n\t\t// \tprops.data = props.persistentData\n\t\t// \tconsole.log('effect props.data after', props.data)\n\t\t// }\n\t}, [planet])\n\n\n\tfunction getPropertiesAndValues(planetObject) {\n\t\t// preparing the arrays that will be displayed\n\n\t\tvar properties = []\n\t\tvar values = []\n\t\tObject.keys(planetObject).slice(0, -5).map((key, index) => {\n\t\t\tproperties.push(key);\n\t\t\tvalues.push(planetObject[key])\n\t\t})\n\n\t\tfor (let i = 0; i < properties.length; i++) {\n\t\t\tproperties[i] = properties[i].replace(/_/g, ' ');\n\t\t}\n\t\treturn [properties, values]\n\t}\n\n\n\tfunction imageImport(r) {\n\t\t// creating a custom context using require.context\n\t\t// reference here: https://webpack.js.org/guides/dependency-management/#require-context\n\n\t\tlet images = {}\n\t\tr.keys().forEach((item, index) => {\n\t\t\timages[item.replace('./', '').split('.')[0]] = r(item);\n\t\t});\n\t\treturn images\n\t}\n     \n\n\tfunction handleClick() {\n\t\t\n\t\tsetPlanet(props.getRandomPlanet(props.data))\n\n\t\tif (props.data.length == 0) {\n\t\t\tconsole.log('empty!')\n\n\t\t\t// dynamicArr.current.concat(props.data)\n\t\t\t// setPlanet(props.getRandomPlanet(.current))\n\n\t\t\t// console.log('restored remaining planets', dynamicArr.current)\n\t\t}\n\n\t\timageRef.current.animate(\n\t\t\t{\n\t\t\t\topacity: [1, 0]\n\t\t\t}, 800)\n\t}\n\n\tlet planetArr = props.data.slice()\n\tconsole.log(planetArr)\n\n\tconsole.log('props.data before', props.data)\n\n\tprops.updateRemainingPlanets(props.data, planet)\n\n\tconsole.log('props.data after', props.data)\n\n\n\tif (planet.name === 'Yavin IV') {\n\t\tplanet.name = 'Yavin-IV' \n\t} \n\n\tconst [propertiesArr, valuesArr] = getPropertiesAndValues(planet)\n\tconst allImages = imageImport(require.context('./images/', false))\n\t\n\n\n\n\n\t\n\t// To-Dos:\n\t// prevent the current planet from loading again (1)\n\n\t// make a component that allows navigation to a specific planet that essentially is a horizontal list of navigable planet names above the planet box. (2)\n\n\t// assign some slight and themed bg color swap depending on planet (3)\n\t// check out animation method alternatives (4)\n\n\t// try to get that cool gradient overlay to work (5)\n\n\t// fix all the unstructured css names (6)\n\t\n\n\n\treturn(\n\t\t<div id='planet-box'\n\t\t\tref={imageRef}\n\t\t\tstyle={{\n\t\t\t\tbackground: 'radial-gradient(rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.3) 90%)',\n\t\t\t\tbackgroundImage: 'url('+allImages[planet.name]+')',\n\t\t\t\tbackgroundSize: 'cover'\n\t\t\t}}\n\t\t> \t\n\t\t\t<h1 id='planet-title'>{planet.name === 'Yavin-IV' ? 'Yavin-iv' : planet.name}</h1>\n\n\t\t\t<div className='fetched'>\n\t\t\t\t<div className='fetched-keys'>\n\t\t\t\t\t{propertiesArr.map(i => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<li className='fetched-item' key={i}>{i}:</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div className='fetched-values'>\n\t\t\t\t\t{valuesArr.map(i => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<li className='fetched-item' key={i}>{i}</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id='new-planet'>\n\t\t\t\t<Button handleClick={handleClick} id='new-planet-text' text='Visit New Planet'/>\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n\n\nexport default PlanetBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}