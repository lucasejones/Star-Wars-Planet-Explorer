{"ast":null,"code":"var _jsxFileName = \"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/quote-machine/src/PlanetBox.js\",\n  _s = $RefreshSig$();\nimport Button from './Button.js';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlanetBox(props) {\n  _s();\n  const initialState = 0;\n  const [count, setCount] = useState(initialState);\n  const imageRef = useRef();\n  useEffect(() => {\n    if (count != initialState) {\n      console.log('child render');\n      imageRef.current.animate({\n        opacity: [0, 1]\n      }, 800);\n    }\n  }, [count]);\n  if (!props.data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }, this);\n  }\n  function getRandomPlanet() {\n    const dataResults = props.data.results;\n    var item = dataResults[Math.floor(Math.random() * dataResults.length)];\n    return item;\n  }\n  var randomPlanet = getRandomPlanet();\n\n  // preparing the arrays that will be displayed\n  var keys = [];\n  var values = [];\n  Object.keys(randomPlanet).slice(0, -5).map((key, index) => {\n    keys.push(key);\n    values.push(randomPlanet[key]);\n  });\n  for (let i = 0; i < keys.length; i++) {\n    keys[i] = keys[i].replace(/_/g, ' ');\n  }\n\n  // return keys, values;\n\n  // var keysArr, values = tryit();\n  // console.log(keysArr, values)\n\n  function handleClick() {\n    setCount(prevCount => prevCount + 1);\n    imageRef.current.animate({\n      opacity: [1, 0]\n    }, 800);\n    console.log('count:', count, 'image', imageRef.current);\n  }\n\n  // console.log('keys', keys)\n  // console.log('vals', values)\n\n  // creating a custom context using require.context\n  // reference here: https://webpack.js.org/guides/dependency-management/#require-context\n\n  function imageImport(r) {\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace('./', '').split('.')[0]] = r(item);\n    });\n    return images;\n  }\n  const allImages = imageImport(require.context('./images/', false));\n  if (randomPlanet.name === 'Yavin IV') {\n    randomPlanet.name = 'Yavin-IV';\n  }\n\n  // console.log('oiweklrn', allImages[item.name])\n  // imageRef = allImages[item.name]\n\n  // console.log('all images', allImages)\n  // console.log('item name', item.name)\n  // console.log('correct!', allImages[item.name])\n  // console.log('yavin?', allImages['Yavin-IV'])\n\n  // the space in Yavin IV was causing strange behavior in which the image was correctly indexed from the allImages object, but was not displaying, despite all the other data doing so. Modifying the image filename to swap the space for a hyphen and changing the fetched item name resolves the issue, though surely there's a more robust approach with larger datasets.\n\n  // To-Dos:\n  // break up this big component? (4)\n  // assign some slight and themed bg color swap depending on planet (2)\n  // fix all the unstructured css names (5)\n  // prevent the current planet from loading again (1)\n  // allow visit to any specific planet with the little bottom dots? (3)\n  // create fade animation when switching planet images\n  // make sure you can't switch count for the planet swap as the state change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"planet-box\",\n    ref: imageRef,\n    style: {\n      background: 'radial-gradient(rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.3) 90%)',\n      backgroundImage: 'url(' + allImages[randomPlanet.name] + ')',\n      backgroundSize: 'cover'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"planet-title\",\n      children: item.name === 'Yavin-IV' ? 'Yavin iv' : randomPlanet.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fetched\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fetched-keys\",\n        children: keys.map(i => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"fetched-item\",\n            children: [i, \":\"]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fetched-values\",\n        children: values.map(i => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"fetched-item\",\n            children: i\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-planet\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        handleClick: handleClick,\n        id: \"new-planet-text\",\n        text: \"Visit New Planet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 3\n  }, this);\n}\n_s(PlanetBox, \"gqZg00plZKOCjrBYSA/Y58k5Pjs=\");\n_c = PlanetBox;\nexport default PlanetBox;\nvar _c;\n$RefreshReg$(_c, \"PlanetBox\");","map":{"version":3,"names":["Button","useState","useEffect","useRef","PlanetBox","props","initialState","count","setCount","imageRef","console","log","current","animate","opacity","data","getRandomPlanet","dataResults","results","item","Math","floor","random","length","randomPlanet","keys","values","Object","slice","map","key","index","push","i","replace","handleClick","prevCount","imageImport","r","images","forEach","split","allImages","require","context","name","background","backgroundImage","backgroundSize"],"sources":["/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/quote-machine/src/PlanetBox.js"],"sourcesContent":["import Button from './Button.js';\nimport { useState, useEffect, useRef} from 'react';\n\n\nfunction PlanetBox(props) {\n\tconst initialState = 0;\n\tconst [count, setCount] = useState(initialState);\n\tconst imageRef = useRef();\n\n\n\tuseEffect(() => {\n\t\tif (count != initialState) {\n\t\t\tconsole.log('child render')\n\t\t\timageRef.current.animate(\n\t\t\t{\n\t\t\t\topacity: [0, 1]\n\t\t\t}, 800)\n\t\t}\n\t}, [count])\n\n\n\tif (!props.data) {\n\t\treturn <div className='loading'>loading...</div>\n\t}\n\n\n\tfunction getRandomPlanet() {\n\t\tconst dataResults = props.data.results\n\n\t\tvar item = dataResults[Math.floor(Math.random() * dataResults.length)];\n\n\t\treturn item\n\t}\n\n\tvar randomPlanet = getRandomPlanet()\n\n\n\t\t// preparing the arrays that will be displayed\n\tvar keys = []\n\tvar values = []\n\tObject.keys(randomPlanet).slice(0, -5).map((key, index) => {\n\t\tkeys.push(key);\n\t\tvalues.push(randomPlanet[key])\n\t})\n\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tkeys[i] = keys[i].replace(/_/g, ' ');\n\t}\n\n\t\t// return keys, values;\n\t\n\n\t// var keysArr, values = tryit();\n\t// console.log(keysArr, values)\n\n\n\n\n\n\n\n\n\tfunction handleClick() {\n\t\tsetCount(prevCount => prevCount + 1)\n\t\timageRef.current.animate(\n\t\t\t{\n\t\t\t\topacity: [1, 0]\n\t\t\t}, 800)\n\n\t\tconsole.log('count:', count, 'image', imageRef.current)\n\t}\n\n\t \n\t\n  \t\n\t\n\n\t// console.log('keys', keys)\n\t// console.log('vals', values)\n\n\n\n\n\t// creating a custom context using require.context\n\t// reference here: https://webpack.js.org/guides/dependency-management/#require-context\n\n\tfunction imageImport(r) {\n\t\tlet images = {}\n\t\tr.keys().forEach((item, index) => {\n\t\t\timages[item.replace('./', '').split('.')[0]] = r(item);\n\t\t});\n\t\treturn images\n\t}\n     \n\tconst allImages = imageImport(require.context('./images/', false))\n\n\tif (randomPlanet.name === 'Yavin IV') {\n\t\trandomPlanet.name = 'Yavin-IV' \n\t} \n\n\t// console.log('oiweklrn', allImages[item.name])\n\t// imageRef = allImages[item.name]\n\n\t// console.log('all images', allImages)\n\t// console.log('item name', item.name)\n\t// console.log('correct!', allImages[item.name])\n    // console.log('yavin?', allImages['Yavin-IV'])\n\n\t// the space in Yavin IV was causing strange behavior in which the image was correctly indexed from the allImages object, but was not displaying, despite all the other data doing so. Modifying the image filename to swap the space for a hyphen and changing the fetched item name resolves the issue, though surely there's a more robust approach with larger datasets.\n\n\n\t// To-Dos:\n\t// break up this big component? (4)\n\t// assign some slight and themed bg color swap depending on planet (2)\n\t// fix all the unstructured css names (5)\n\t// prevent the current planet from loading again (1)\n\t// allow visit to any specific planet with the little bottom dots? (3)\n\t// create fade animation when switching planet images\n\t// make sure you can't switch count for the planet swap as the state change\n\n\n\treturn(\n\t\t<div id='planet-box'\n\t\t\tref={imageRef}\n\t\t\tstyle={{\n\t\t\t\tbackground: 'radial-gradient(rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.3) 90%)',\n\t\t\t\tbackgroundImage: 'url('+allImages[randomPlanet.name]+')',\n\t\t\t\tbackgroundSize: 'cover'\n\t\t\t}}\n\t\t> \t\n\t\t\t<h1 id='planet-title'>{item.name === 'Yavin-IV' ? 'Yavin iv' : randomPlanet.name}</h1>\n\n\t\t\t<div className='fetched'>\n\t\t\t\t<div className='fetched-keys'>\n\t\t\t\t\t{keys.map(i => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<li className='fetched-item' key={i}>{i}:</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div className='fetched-values'>\n\t\t\t\t\t{values.map(i => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<li className='fetched-item' key={i}>{i}</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id='new-planet'>\n\t\t\t\t<Button handleClick={handleClick} id='new-planet-text' text='Visit New Planet'/>\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n\nexport default PlanetBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}