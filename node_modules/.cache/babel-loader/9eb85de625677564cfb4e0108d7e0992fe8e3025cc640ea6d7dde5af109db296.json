{"ast":null,"code":"var _jsxFileName = \"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/PlanetBox.js\",\n  _s = $RefreshSig$();\nimport Button from './Button.js';\nimport FetchedData from './FetchedData.js';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlanetBox(_ref) {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [index, setIndex] = useState(0);\n  const imageRef = useRef();\n  const arrFill = Array.from(Array(data.length - 1)).map((e, i) => i + 1);\n  const indexArrRef = useRef(arrFill);\n  useEffect(() => {\n    console.log('PlanetBox render');\n    imageRef.current.animate({\n      opacity: [0, 1]\n    }, 800);\n  });\n  function indexFromProxyArr(proxyArr, currentIndex) {\n    let newIndex = proxyArr[Math.floor(Math.random() * proxyArr.length)];\n    if (newIndex === currentIndex) {\n      newIndex = indexFromProxyArr(proxyArr, currentIndex);\n    }\n    proxyArr.splice(proxyArr.indexOf(newIndex), 1);\n    return newIndex;\n  }\n  function imageImport(r) {\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace('./', '').split('.')[0]] = r(item);\n    });\n    return images;\n  }\n  function handleClick() {\n    if (indexArrRef.current.length == 0) {\n      indexArrRef.current = Array.from(Array(10).keys());\n    }\n    let newIndex = indexFromProxyArr(indexArrRef.current, index);\n    setIndex(newIndex);\n    imageRef.current.animate({\n      opacity: [1, 0]\n    }, 800);\n  }\n  const allImages = imageImport(require.context('./images/', false));\n  const planet = data[index];\n  if (planet.name === 'Yavin IV') {\n    planet.name = 'Yavin-IV';\n  }\n\n  // To-Dos:\n  // understand the triggering animation in useffect and how that relates to this idea from useEffect reference: If you’re not trying to synchronize with some external system, you probably don’t need an Effect. (links to \"you might not need an effect\")\n\n  // make a component that allows navigation to a specific planet that essentially is a horizontal list of navigable planet names above the planet box. (1)\n  // lift state up into a new component that will contain PlanetsList and PlanetBox. this will contain a lot of the logic currently in planetbox, because PlanetsList also needs access to this.\n\n  // check out animation method alternatives (2)\n\n  // assign some slight and themed bg color swap depending on planet (3)\n\n  // fix all the unstructured css names (4)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planet-box\",\n    ref: imageRef,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: allImages[planet.name],\n      alt: 'a depiction of ' + allImages[planet.name],\n      className: \"planet-box-image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"planet-title\",\n      children: planet.name === 'Yavin-IV' ? 'Yavin-iv' : planet.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(FetchedData, {\n      currentPlanet: planet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-planet\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        handleClick: handleClick,\n        id: \"new-planet-text\",\n        text: \"Visit Random Planet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this);\n}\n_s(PlanetBox, \"qWY0Uxqe+/7ppWegVzrlaabx0Q0=\");\n_c = PlanetBox;\nvar _c;\n$RefreshReg$(_c, \"PlanetBox\");","map":{"version":3,"names":["Button","FetchedData","useState","useEffect","useRef","PlanetBox","data","index","setIndex","imageRef","arrFill","Array","from","length","map","e","i","indexArrRef","console","log","current","animate","opacity","indexFromProxyArr","proxyArr","currentIndex","newIndex","Math","floor","random","splice","indexOf","imageImport","r","images","keys","forEach","item","replace","split","handleClick","allImages","require","context","planet","name"],"sources":["/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/PlanetBox.js"],"sourcesContent":["import Button from './Button.js';\nimport FetchedData from './FetchedData.js';\nimport { useState, useEffect, useRef } from 'react';\n\n\nexport default function PlanetBox({ data }) {\n\tconst [index, setIndex] = useState(0)\n\tconst imageRef = useRef();\n\tconst arrFill = Array.from(Array(data.length - 1)).map((e, i) => i + 1)\n\tconst indexArrRef = useRef(arrFill)\n\n\tuseEffect(() => {\n\t\tconsole.log('PlanetBox render')\n\n\t\timageRef.current.animate(\n\t\t{\n\t\t\topacity: [0, 1]\n\t\t}, 800)\n\t})\n\n\n\tfunction indexFromProxyArr(proxyArr, currentIndex) {\n\t\tlet newIndex = proxyArr[Math.floor(Math.random() * proxyArr.length)]\n\t\t\n\t\tif (newIndex === currentIndex) {\n\t\t\tnewIndex = indexFromProxyArr(proxyArr, currentIndex)\n\t\t}\n\t\tproxyArr.splice(proxyArr.indexOf(newIndex), 1)\n\n\t\treturn newIndex\n\t}\n\t\n\n\tfunction imageImport(r) {\n\t\tlet images = {}\n\t\tr.keys().forEach((item, index) => {\n\t\t\timages[item.replace('./', '').split('.')[0]] = r(item);\n\t\t});\n\t\treturn images\n\t}\n     \n\n\tfunction handleClick() {\n\t\tif (indexArrRef.current.length == 0) {\n\t\t\tindexArrRef.current = Array.from(Array(10).keys())\n\t\t}\n\n\t\tlet newIndex = indexFromProxyArr(indexArrRef.current, index)\n\t\tsetIndex(newIndex)\n\n\t\timageRef.current.animate(\n\t\t\t{\n\t\t\t\topacity: [1, 0]\n\t\t\t}, 800)\n\t}\n\n\tconst allImages = imageImport(require.context('./images/', false))\n\tconst planet = data[index]\n\n\tif (planet.name === 'Yavin IV') {\n\t\tplanet.name = 'Yavin-IV' \n\t} \n\n\t// To-Dos:\n\t\t// understand the triggering animation in useffect and how that relates to this idea from useEffect reference: If you’re not trying to synchronize with some external system, you probably don’t need an Effect. (links to \"you might not need an effect\")\n\n\t// make a component that allows navigation to a specific planet that essentially is a horizontal list of navigable planet names above the planet box. (1)\n\t\t// lift state up into a new component that will contain PlanetsList and PlanetBox. this will contain a lot of the logic currently in planetbox, because PlanetsList also needs access to this.\n\n\t// check out animation method alternatives (2)\n\n\t// assign some slight and themed bg color swap depending on planet (3)\n\n\t// fix all the unstructured css names (4)\n\t\n\n\n\treturn(\n\t\t<div className='planet-box'\n\t\t\tref={imageRef}\n\t\t> \t\n\t\t\t<img \n\t\t\t\tsrc={allImages[planet.name]} \n\t\t\t\talt={'a depiction of ' + allImages[planet.name]}\n\t\t\t\tclassName='planet-box-image'\n\t\t\t/>\n\t\t\t<h1 className='planet-title'>{planet.name === 'Yavin-IV' ? 'Yavin-iv' : planet.name}</h1>\n\n\t\t\t<FetchedData\n\t\t\t\tcurrentPlanet={planet}\n\t\t\t/>\n\n\t\t\t<div id='new-planet'>\n\t\t\t\t<Button \n\t\t\t\t\thandleClick={handleClick} \n\t\t\t\t\tid='new-planet-text' \n\t\t\t\t\ttext='Visit Random Planet'\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}