{"ast":null,"code":"var _jsxFileName = \"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/quote-machine/src/PlanetBox.js\",\n  _s = $RefreshSig$();\nimport Button from './Button.js';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlanetBox(props) {\n  _s();\n  const [index, setIndex] = useState(0);\n  const imageRef = useRef();\n  const arrFill = Array.from(Array(props.data.length - 1)).map((e, i) => i + 1);\n  const indexArrRef = useRef(arrFill);\n  useEffect(() => {\n    console.log('child render');\n    imageRef.current.animate({\n      opacity: [0, 1]\n    }, 800);\n  }, [index]);\n  function indexFromLessening(indexArr, currentIndex) {\n    // returns the index which will be used as the new state on click.\n\n    // there's a recursive block which ensures that no duplicate value can be given when the array is restored from being emptied \n    //ex: (if 4 was the final value to empty out, 4 will not be called first when the array is re-filled.)\n\n    // getting the value from the array of remaining indices\n    let newIndex = indexArr[Math.floor(Math.random() * indexArr.length)];\n    if (newIndex === currentIndex) {\n      // console.log('current index rerun', currentIndex, 'newIndex rerun', newIndex)\n      newIndex = indexFromLessening(indexArr, currentIndex);\n    }\n    // console.log('current index', currentIndex, 'newIndex', newIndex)\n\n    // eliminating that value from the array of remaining indices\n    indexArr.splice(indexArr.indexOf(newIndex), 1);\n    // console.log('newindexinfunc', newIndex, indexArr.indexOf(newIndex))\n\n    return newIndex;\n  }\n  function getPropertiesAndValues(planetObject) {\n    // preparing the arrays that will be displayed\n\n    var properties = [];\n    var values = [];\n    Object.keys(planetObject).slice(0, -5).map((key, index) => {\n      properties.push(key);\n      values.push(planetObject[key]);\n    });\n    for (let i = 0; i < properties.length; i++) {\n      properties[i] = properties[i].replace(/_/g, ' ');\n    }\n    return [properties, values];\n  }\n  function imageImport(r) {\n    // creating a custom context using require.context\n    // reference here: https://webpack.js.org/guides/dependency-management/#require-context\n\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace('./', '').split('.')[0]] = r(item);\n    });\n    return images;\n  }\n  function handleClick() {\n    // let newRandomIndex = getNewRandomIndex(props.data.length, index)\n    // setIndex(newRandomIndex)\n    if (indexArrRef.current.length == 0) {\n      indexArrRef.current = Array.from(Array(10).keys());\n    }\n    let newran = indexFromLessening(indexArrRef.current, index);\n    setIndex(newran);\n    imageRef.current.animate({\n      opacity: [1, 0]\n    }, 800);\n  }\n  console.log(props.data);\n  console.log(indexArrRef.current);\n  console.log('current index', index);\n  let planet = props.data[index];\n  // console.log(planet)\n\n  if (planet.name === 'Yavin IV') {\n    planet.name = 'Yavin-IV';\n  }\n  const [propertiesArr, valuesArr] = getPropertiesAndValues(planet);\n  const allImages = imageImport(require.context('./images/', false));\n\n  // To-Dos:\n\n  // make a component that allows navigation to a specific planet that essentially is a horizontal list of navigable planet names above the planet box. (1)\n\n  // assign some slight and themed bg color swap depending on planet (4)\n\n  // check out animation method alternatives (2)\n\n  // try to get that cool gradient overlay to work (3)\n\n  // fix all the unstructured css names (5)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"planet-box\",\n    ref: imageRef,\n    style: {\n      background: 'radial-gradient(rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.3) 90%)',\n      backgroundImage: 'url(' + allImages[planet.name] + ')',\n      backgroundSize: 'cover'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"planet-title\",\n      children: planet.name === 'Yavin-IV' ? 'Yavin-iv' : planet.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fetched\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fetched-keys\",\n        children: propertiesArr.map(i => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"fetched-item\",\n            children: [i, \":\"]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fetched-values\",\n        children: valuesArr.map(i => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"fetched-item\",\n            children: i\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-planet\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        handleClick: handleClick,\n        id: \"new-planet-text\",\n        text: \"Visit New Planet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 3\n  }, this);\n}\n_s(PlanetBox, \"qWY0Uxqe+/7ppWegVzrlaabx0Q0=\");\n_c = PlanetBox;\nexport default PlanetBox;\nvar _c;\n$RefreshReg$(_c, \"PlanetBox\");","map":{"version":3,"names":["Button","useState","useEffect","useRef","PlanetBox","props","index","setIndex","imageRef","arrFill","Array","from","data","length","map","e","i","indexArrRef","console","log","current","animate","opacity","indexFromLessening","indexArr","currentIndex","newIndex","Math","floor","random","splice","indexOf","getPropertiesAndValues","planetObject","properties","values","Object","keys","slice","key","push","replace","imageImport","r","images","forEach","item","split","handleClick","newran","planet","name","propertiesArr","valuesArr","allImages","require","context","background","backgroundImage","backgroundSize"],"sources":["/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/quote-machine/src/PlanetBox.js"],"sourcesContent":["import Button from './Button.js';\nimport { useState, useEffect, useRef } from 'react';\n\n\n\nfunction PlanetBox(props) {\n\tconst [index, setIndex] = useState(0)\n\tconst imageRef = useRef();\n\tconst arrFill = Array.from(Array(props.data.length - 1)).map((e, i) => i + 1)\n\tconst indexArrRef = useRef(arrFill)\n\n\tuseEffect(() => {\n\t\tconsole.log('child render')\n\n\t\timageRef.current.animate(\n\t\t{\n\t\t\topacity: [0, 1]\n\t\t}, 800)\n\n\t}, [index])\n\n\n\tfunction indexFromLessening(indexArr, currentIndex) {\n\t\t// returns the index which will be used as the new state on click.\n\n\t\t// there's a recursive block which ensures that no duplicate value can be given when the array is restored from being emptied \n\t\t//ex: (if 4 was the final value to empty out, 4 will not be called first when the array is re-filled.)\n\n\t\t// getting the value from the array of remaining indices\n\t\tlet newIndex = indexArr[Math.floor(Math.random() * indexArr.length)]\n\t\t\n\t\tif (newIndex === currentIndex) {\n\t\t\t// console.log('current index rerun', currentIndex, 'newIndex rerun', newIndex)\n\t\t\tnewIndex = indexFromLessening(indexArr, currentIndex)\n\t\t}\n\t\t// console.log('current index', currentIndex, 'newIndex', newIndex)\n\n\t\t// eliminating that value from the array of remaining indices\n\t\tindexArr.splice(indexArr.indexOf(newIndex), 1)\n\t\t// console.log('newindexinfunc', newIndex, indexArr.indexOf(newIndex))\n\n\t\treturn newIndex\n\t}\n\n\n\tfunction getPropertiesAndValues(planetObject) {\n\t\t// preparing the arrays that will be displayed\n\n\t\tvar properties = []\n\t\tvar values = []\n\t\tObject.keys(planetObject).slice(0, -5).map((key, index) => {\n\t\t\tproperties.push(key);\n\t\t\tvalues.push(planetObject[key])\n\t\t})\n\n\t\tfor (let i = 0; i < properties.length; i++) {\n\t\t\tproperties[i] = properties[i].replace(/_/g, ' ');\n\t\t}\n\t\treturn [properties, values]\n\t}\n\n\t\n\tfunction imageImport(r) {\n\t\t// creating a custom context using require.context\n\t\t// reference here: https://webpack.js.org/guides/dependency-management/#require-context\n\n\t\tlet images = {}\n\t\tr.keys().forEach((item, index) => {\n\t\t\timages[item.replace('./', '').split('.')[0]] = r(item);\n\t\t});\n\t\treturn images\n\t}\n     \n\n\tfunction handleClick() {\n\t\t// let newRandomIndex = getNewRandomIndex(props.data.length, index)\n\t\t// setIndex(newRandomIndex)\n\t\tif (indexArrRef.current.length == 0) {\n\t\t\tindexArrRef.current = Array.from(Array(10).keys())\n\t\t}\n\n\t\tlet newran = indexFromLessening(indexArrRef.current, index)\n\t\tsetIndex(newran)\n\n\t\timageRef.current.animate(\n\t\t\t{\n\t\t\t\topacity: [1, 0]\n\t\t\t}, 800)\n\t}\n\n\tconsole.log(props.data)\n\tconsole.log(indexArrRef.current)\n\tconsole.log('current index', index)\n\n\tlet planet = props.data[index]\n\t// console.log(planet)\n\n\tif (planet.name === 'Yavin IV') {\n\t\tplanet.name = 'Yavin-IV' \n\t} \n\n\tconst [propertiesArr, valuesArr] = getPropertiesAndValues(planet)\n\tconst allImages = imageImport(require.context('./images/', false))\n\n\n\t\n\n\n\n\n\t\n\t// To-Dos:\n\n\t// make a component that allows navigation to a specific planet that essentially is a horizontal list of navigable planet names above the planet box. (1)\n\n\t// assign some slight and themed bg color swap depending on planet (4)\n\n\t// check out animation method alternatives (2)\n\n\t// try to get that cool gradient overlay to work (3)\n\n\t// fix all the unstructured css names (5)\n\t\n\n\n\treturn(\n\t\t<div id='planet-box'\n\t\t\tref={imageRef}\n\t\t\tstyle={{\n\t\t\t\tbackground: 'radial-gradient(rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.3) 90%)',\n\t\t\t\tbackgroundImage: 'url('+allImages[planet.name]+')',\n\t\t\t\tbackgroundSize: 'cover'\n\t\t\t}}\n\t\t> \t\n\t\t\t<h1 id='planet-title'>{planet.name === 'Yavin-IV' ? 'Yavin-iv' : planet.name}</h1>\n\n\t\t\t<div className='fetched'>\n\t\t\t\t<div className='fetched-keys'>\n\t\t\t\t\t{propertiesArr.map(i => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<li className='fetched-item' key={i}>{i}:</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div className='fetched-values'>\n\t\t\t\t\t{valuesArr.map(i => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<li className='fetched-item' key={i}>{i}</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id='new-planet'>\n\t\t\t\t<Button handleClick={handleClick} id='new-planet-text' text='Visit New Planet'/>\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n\n\nexport default PlanetBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}