{"ast":null,"code":"var _jsxFileName = \"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/quote-machine/src/PlanetBox.js\",\n  _s = $RefreshSig$();\nimport Button from './Button.js';\n// import twittericon from './images/twittericon.png';\n// import nab from './Naboo.jpg';\n// import './Naboo.jpg';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlanetBox() {\n  _s();\n  const [data, setData] = useState('');\n  const [toggle, setToggle] = useState(false);\n  let url = 'https://swapi.dev/api/planets/';\n  useEffect(() => {\n    const fetchIt = async () => {\n      const res = await fetch(url);\n      var data = await res.json();\n      setData(data);\n    };\n    fetchIt();\n    console.log('re-rendered');\n  }, []);\n  function handleClick() {\n    setToggle(prevState => !prevState);\n  }\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }, this);\n  }\n  const ressies = data.results;\n  console.log(ressies);\n  var item = ressies[Math.floor(Math.random() * ressies.length)];\n  console.log(item);\n  var keys = [];\n  var values = [];\n  Object.keys(item).slice(0, -5).map((key, index) => {\n    keys.push(key);\n    values.push(item[key]);\n  });\n  for (let i = 0; i < keys.length; i++) {\n    keys[i] = keys[i].replace(/_/g, ' ');\n  }\n  function imageImport(r) {\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace('./', '')] = r(item);\n    });\n    return images;\n  }\n  const allImages = imageImport(require.context('./images/', false, /\\.(webp|png|jpeg)$/));\n\n  // console.log('keys', allImages.keys())\n\n  // display a semitransparent background image of the planet described\n  // assign some slight and themed bg color swap depending on planet\n  // fix all the unstructured css names\n  // allow visit to any specific planet with the little bottom dots?\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n\n  // return(\n  // \t<div id='planet-box'>\n  // \t\t{/*<img className='planet-bg' src={nab} alt={nab}/>*/}\n  // \t{/*<img className='planet-bg' src={allImages.keys()[item.name]} alt={item.name}/>*/}\n  // \t\t{/*<h1 id='planet-title'>{item.name === 'Yavin IV' ? 'Yavin 4' : item.name}</h1>*/}\n  // \t\t<h1 id='planet-title'>{item.name}</h1>\n\n  // \t\t<div className='fetched'>\n  // \t\t\t<div className='fetched-keys'>\n  // \t\t\t\t{keys.map(i => {\n  // \t\t\t\t\treturn(\n  // \t\t\t\t\t\t<li className='fetched-item' key={i}>{i}:</li>\n  // \t\t\t\t\t)\n\n  // \t\t\t\t\t})\n\n  // \t\t\t\t}\n  // \t\t\t</div>\n  // \t\t\t<div className='fetched-values'>\n  // \t\t\t\t{values.map(i => {\n  // \t\t\t\t\treturn(\n  // \t\t\t\t\t\t<li className='fetched-item' key={i}>{i}</li>\n  // \t\t\t\t\t)\n\n  // \t\t\t\t\t})\n\n  // \t\t\t\t}\n  // \t\t\t</div>\n  // \t\t</div>\n\n  // \t\t<div id='new-planet'>\n  // \t\t\t<Button handleClick={handleClick} id='new-planet-text' text='Visit New Planet'/>\n  // \t\t</div>\n\n  // \t\t{/*<a href='#1' id='tweet-quote'>\n  // \t\t\t<img id='twitter-icon' alt='twitter icon' src={twittericon} />\n  // \t\t</a>*/}\n  // \t</div>\n  // );\n}\n_s(PlanetBox, \"Ocwn9xNedb90qtq4bi9o1N7tm08=\");\n_c = PlanetBox;\nexport default PlanetBox;\nvar _c;\n$RefreshReg$(_c, \"PlanetBox\");","map":{"version":3,"names":["Button","useState","useEffect","PlanetBox","data","setData","toggle","setToggle","url","fetchIt","res","fetch","json","console","log","handleClick","prevState","ressies","results","item","Math","floor","random","length","keys","values","Object","slice","map","key","index","push","i","replace","imageImport","r","images","forEach","allImages","require","context"],"sources":["/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/quote-machine/src/PlanetBox.js"],"sourcesContent":["import Button from './Button.js';\n// import twittericon from './images/twittericon.png';\n// import nab from './Naboo.jpg';\n// import './Naboo.jpg';\nimport { useState, useEffect} from 'react';\n\n\nfunction PlanetBox() {\n\tconst [data, setData] = useState('');\n\tconst [toggle, setToggle] = useState(false)\n\tlet url = 'https://swapi.dev/api/planets/'\n\n\tuseEffect(() => {\n\t\tconst fetchIt = async () => {\n\t\tconst res = await fetch(url);\n\t\tvar data = await res.json()\n\n\t\tsetData(data)\n\t\t}\n\n\t\tfetchIt()\n\t\tconsole.log('re-rendered')\n\t}, [])\n\n\n\tfunction handleClick() {\n\t\tsetToggle(prevState => !prevState)\n\t}\n\n\t \n\tif (!data) {\n\t\treturn <div className='loading'>loading...</div>\n\t}\n  \n\tconst ressies = data.results\n\tconsole.log(ressies)\n\tvar item = ressies[Math.floor(Math.random() * ressies.length)];\n\tconsole.log(item)\n\n\tvar keys = []\n\tvar values = []\n\n\tObject.keys(item).slice(0, -5).map((key, index) => {\n\t\tkeys.push(key);\n\t\tvalues.push(item[key])\n\t})\n\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tkeys[i] = keys[i].replace(/_/g, ' ');\n\t}\n\n\tfunction imageImport(r) {\n\t\tlet images = {}\n\t\tr.keys().forEach((item, index) => {\n\t\t\timages[item.replace('./', '')] = r(item);\n\t\t});\n\t\treturn images\n\t}\n\n\tconst allImages = imageImport(require.context('./images/', false, /\\.(webp|png|jpeg)$/))\n\n\t// console.log('keys', allImages.keys())\n\n\t// display a semitransparent background image of the planet described\n\t// assign some slight and themed bg color swap depending on planet\n\t// fix all the unstructured css names\n\t// allow visit to any specific planet with the little bottom dots?\n\treturn(\n\t\t<div className='loading'>loading...</div>\n\t\t)\n\n\t// return(\n\t// \t<div id='planet-box'>\n\t// \t\t{/*<img className='planet-bg' src={nab} alt={nab}/>*/}\n\t// \t{/*<img className='planet-bg' src={allImages.keys()[item.name]} alt={item.name}/>*/}\n\t// \t\t{/*<h1 id='planet-title'>{item.name === 'Yavin IV' ? 'Yavin 4' : item.name}</h1>*/}\n\t// \t\t<h1 id='planet-title'>{item.name}</h1>\n\n\t// \t\t<div className='fetched'>\n\t// \t\t\t<div className='fetched-keys'>\n\t// \t\t\t\t{keys.map(i => {\n\t// \t\t\t\t\treturn(\n\t// \t\t\t\t\t\t<li className='fetched-item' key={i}>{i}:</li>\n\t// \t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t// \t\t\t\t\t})\n\n\t// \t\t\t\t}\n\t// \t\t\t</div>\n\t// \t\t\t<div className='fetched-values'>\n\t// \t\t\t\t{values.map(i => {\n\t// \t\t\t\t\treturn(\n\t// \t\t\t\t\t\t<li className='fetched-item' key={i}>{i}</li>\n\t// \t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t// \t\t\t\t\t})\n\n\t// \t\t\t\t}\n\t// \t\t\t</div>\n\t// \t\t</div>\n\n\t// \t\t<div id='new-planet'>\n\t// \t\t\t<Button handleClick={handleClick} id='new-planet-text' text='Visit New Planet'/>\n\t// \t\t</div>\n\n\t// \t\t{/*<a href='#1' id='tweet-quote'>\n\t// \t\t\t<img id='twitter-icon' alt='twitter icon' src={twittericon} />\n\t// \t\t</a>*/}\n\t// \t</div>\n\t// );\n}\n\nexport default PlanetBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}