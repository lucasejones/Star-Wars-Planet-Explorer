{"ast":null,"code":"var _jsxFileName = \"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/quote-machine/src/PlanetBox.js\",\n  _s = $RefreshSig$();\nimport Button from './Button.js';\nimport { useState, useEffect } from 'react';\nimport { data, generateRandom, randomNumber } from './App.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlanetBox(props) {\n  _s();\n  // const [data, setData] = useState('');\n  const [randNum, setRandNum] = useState(props.randomNumber);\n  const [toggle, setToggle] = useState(false);\n\n  // let url = 'https://swapi.dev/api/planets/'\n\n  // useEffect(() => {\n  // \tconst fetchIt = async () => {\n  // \t\tconst res = await fetch(url);\n  // \t\tvar data = await res.json()\n\n  // \t\tsetData(data)\n  // \t}\n\n  // \tfetchIt()\n  // \tconsole.log('re-rendered')\n  // }, [])\n\n  // console.log('top')\n\n  // here's the idea: \n  // obtain a random index, 0-9, from the parent component.\n  // pass that random index to this child as props\n  // check to see if what's passed as props is equal to the existing value (might need to assign a default value, like 0)\n  // if it is equal (therefore a repeat), calculate a new number (that is not the number you just got - might need an additional check statement) in this child component and use that instead.\n\n  // this might be helpful: https://stackoverflow.com/questions/58215191/in-react-hooks-how-to-set-state-to-a-random-number-and-use-that-to-display-a-st\n\n  // // this will already be accessible from props, don't need to make this variable\n  // var random_number = data.results[Math.floor(Math.random() * data.results.length)]\n  // // instantiating a new variable to handle repeats\n  // var new_random_number = null\n  // if (random_number === setCount(random_number) {\n  // \t\t// assigning the randomization to the new variable\n  // \t\tnew_random_number = data.results[Math.floor(Math.random() * data.results.length)]\n  // \t}\t\n\n  // idea 2:\n  // instead of toggle, maybe create a useState that contains the random number index?\n  // ex: const [randNum, setRandNum] = useState(null)\n  // in the child component itself, can define this and maybe check against the existing value? yes!\n  // if math.floor.random thing result === randNum, \n  //\trun math.floor.random thing again\n  // else, \n  // setRandNum(math.floor.random thing value)\n  // then, finally, display the data with data[randNum] or whatever\n\n  function handleClick() {\n    setToggle(prevState => !prevState);\n  }\n\n  // if (!data) {\n  // \treturn <div className='loading'>loading...</div>\n  // }\n\n  // function generateRandom(maximum) {\n  // \tvar randInt = Math.floor(Math.random() * maximum)\n  // \treturn randInt \n  // }\n  // console.log(generateRandom(data.results.length))\n\n  //_______________________________________________________\n\n  // const dataResults = data.results\n  // console.log(dataResults)\n\n  // // obtaining a random item\n  // var item = dataResults[Math.floor(Math.random() * dataResults.length)];\n  // console.log(item)\n\n  //_______________________________________________________\n\n  //make a new number in child component\n  var randInte = props.generateRandom(props.data.results.length);\n  // console.log('randinte:', randInte)\n\n  // while the old number is the same as the new number, make a new new number.\n  console.log('randNum:', randNum);\n  console.log('randInte:', randInte);\n  if (randInte === randNum) {\n    randInte = setRandNum(props.generateRandom(props.data.results.length));\n  }\n  // while (randNum === randInte) {\n  // \trandInte = props.generateRandom(props.data.results.length)\n  // }\n\n  // set the future old number to the current new number\n  // setRandNum(randInte)\n\n  // grab the data using this unique index\n  var item = props.data.results[randInte];\n\n  // preparing the arrays that will be displayed\n  var keys = [];\n  var values = [];\n  Object.keys(item).slice(0, -5).map((key, index) => {\n    keys.push(key);\n    values.push(item[key]);\n  });\n  for (let i = 0; i < keys.length; i++) {\n    keys[i] = keys[i].replace(/_/g, ' ');\n  }\n\n  // console.log('keys', keys)\n  // console.log('vals', values)\n\n  // creating a custom context using require.context\n  // reference here: https://webpack.js.org/guides/dependency-management/#require-context\n\n  function imageImport(r) {\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace('./', '').split('.')[0]] = r(item);\n    });\n    return images;\n  }\n  const allImages = imageImport(require.context('./images/', false));\n  if (item.name === 'Yavin IV') {\n    item.name = 'Yavin-IV';\n  }\n\n  // console.log('all images', allImages)\n  // console.log('item name', item.name)\n  // console.log('correct!', allImages[item.name])\n  // console.log('yavin?', allImages['Yavin-IV'])\n\n  // the space in Yavin IV was causing strange behavior in which the image was correctly indexed from the allImages object, but was not displaying, despite all the other data doing so. Modifying the image filename to swap the space for a hyphen and changing the fetched item name resolves the issue, though surely there's a more robust approach with larger datasets.\n\n  // To-Dos:\n  // break up this big component? (4)\n  // assign some slight and themed bg color swap depending on planet (2)\n  // fix all the unstructured css names (5)\n  // prevent the current planet from loading again (1)\n  // allow visit to any specific planet with the little bottom dots? (3)\n\n  setRandNum(randInte);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"planet-box\",\n    style: {\n      background: 'radial-gradient(rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.3) 90%)',\n      backgroundImage: 'url(' + allImages[item.name] + ')',\n      backgroundSize: 'cover'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"planet-title\",\n      children: item.name === 'Yavin-IV' ? 'Yavin iv' : item.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fetched\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fetched-keys\",\n        children: keys.map(i => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"fetched-item\",\n            children: [i, \":\"]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fetched-values\",\n        children: values.map(i => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"fetched-item\",\n            children: i\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"new-planet\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        handleClick: handleClick,\n        id: \"new-planet-text\",\n        text: \"Visit New Planet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 3\n  }, this);\n}\n_s(PlanetBox, \"l584/989aerAJ7HoWHpxCQdbFsM=\");\n_c = PlanetBox;\nexport default PlanetBox;\nvar _c;\n$RefreshReg$(_c, \"PlanetBox\");","map":{"version":3,"names":["Button","useState","useEffect","data","generateRandom","randomNumber","PlanetBox","props","randNum","setRandNum","toggle","setToggle","handleClick","prevState","randInte","results","length","console","log","item","keys","values","Object","slice","map","key","index","push","i","replace","imageImport","r","images","forEach","split","allImages","require","context","name","background","backgroundImage","backgroundSize"],"sources":["/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/quote-machine/src/PlanetBox.js"],"sourcesContent":["import Button from './Button.js';\nimport { useState, useEffect} from 'react';\nimport { data, generateRandom, randomNumber } from './App.js'\n\n\nfunction PlanetBox(props) {\n\t// const [data, setData] = useState('');\n\tconst [randNum, setRandNum] = useState(props.randomNumber)\n\tconst [toggle, setToggle] = useState(false)\n\n\t// let url = 'https://swapi.dev/api/planets/'\n\n\t// useEffect(() => {\n\t// \tconst fetchIt = async () => {\n\t// \t\tconst res = await fetch(url);\n\t// \t\tvar data = await res.json()\n\n\t// \t\tsetData(data)\n\t// \t}\n\n\t// \tfetchIt()\n\t// \tconsole.log('re-rendered')\n\t// }, [])\n\n\t// console.log('top')\n\n\t// here's the idea: \n\t\t// obtain a random index, 0-9, from the parent component.\n\t\t// pass that random index to this child as props\n\t\t// check to see if what's passed as props is equal to the existing value (might need to assign a default value, like 0)\n\t\t\t// if it is equal (therefore a repeat), calculate a new number (that is not the number you just got - might need an additional check statement) in this child component and use that instead.\n\n\t// this might be helpful: https://stackoverflow.com/questions/58215191/in-react-hooks-how-to-set-state-to-a-random-number-and-use-that-to-display-a-st\n\n\t// // this will already be accessible from props, don't need to make this variable\n\t// var random_number = data.results[Math.floor(Math.random() * data.results.length)]\n\t// // instantiating a new variable to handle repeats\n\t// var new_random_number = null\n\t// if (random_number === setCount(random_number) {\n\t// \t\t// assigning the randomization to the new variable\n\t// \t\tnew_random_number = data.results[Math.floor(Math.random() * data.results.length)]\n\t// \t}\t\n\n\t// idea 2:\n\t\t// instead of toggle, maybe create a useState that contains the random number index?\n\t\t// ex: const [randNum, setRandNum] = useState(null)\n\t\t// in the child component itself, can define this and maybe check against the existing value? yes!\n\t\t\t// if math.floor.random thing result === randNum, \n\t\t\t//\trun math.floor.random thing again\n\t\t\t// else, \n\t\t\t// setRandNum(math.floor.random thing value)\n\t\t\t// then, finally, display the data with data[randNum] or whatever\n\n\n\n\n\tfunction handleClick() {\n\t\tsetToggle(prevState => !prevState)\n\t}\n\n\t \n\t// if (!data) {\n\t// \treturn <div className='loading'>loading...</div>\n\t// }\n\n\t// function generateRandom(maximum) {\n\t// \tvar randInt = Math.floor(Math.random() * maximum)\n\t// \treturn randInt \n\t// }\n\t// console.log(generateRandom(data.results.length))\n\n\n\t//_______________________________________________________\n  \t\n\t// const dataResults = data.results\n\t// console.log(dataResults)\n\n\t// // obtaining a random item\n\t// var item = dataResults[Math.floor(Math.random() * dataResults.length)];\n\t// console.log(item)\n\n\t//_______________________________________________________\n\n\t//make a new number in child component\n\tvar randInte = props.generateRandom(props.data.results.length)\n\t// console.log('randinte:', randInte)\n\n\t// while the old number is the same as the new number, make a new new number.\n\tconsole.log('randNum:', randNum)\n\tconsole.log('randInte:', randInte)\n\n\tif (randInte === randNum) {\n\t\trandInte = setRandNum(props.generateRandom(props.data.results.length))\n\t}\n\t// while (randNum === randInte) {\n\t// \trandInte = props.generateRandom(props.data.results.length)\n\t// }\n\n\t// set the future old number to the current new number\n\t// setRandNum(randInte)\n\n\t// grab the data using this unique index\n\tvar item = props.data.results[randInte]\n\n\n\n\n\t// preparing the arrays that will be displayed\n\tvar keys = []\n\tvar values = []\n\tObject.keys(item).slice(0, -5).map((key, index) => {\n\t\tkeys.push(key);\n\t\tvalues.push(item[key])\n\t})\n\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tkeys[i] = keys[i].replace(/_/g, ' ');\n\t}\n\n\t// console.log('keys', keys)\n\t// console.log('vals', values)\n\n\n\n\n\t// creating a custom context using require.context\n\t// reference here: https://webpack.js.org/guides/dependency-management/#require-context\n\n\tfunction imageImport(r) {\n\t\tlet images = {}\n\t\tr.keys().forEach((item, index) => {\n\t\t\timages[item.replace('./', '').split('.')[0]] = r(item);\n\t\t});\n\t\treturn images\n\t}\n     \n\tconst allImages = imageImport(require.context('./images/', false))\n\n\tif (item.name === 'Yavin IV') {\n\t\titem.name = 'Yavin-IV' \n\t} \n\n\t// console.log('all images', allImages)\n\t// console.log('item name', item.name)\n\t// console.log('correct!', allImages[item.name])\n    // console.log('yavin?', allImages['Yavin-IV'])\n\n\t// the space in Yavin IV was causing strange behavior in which the image was correctly indexed from the allImages object, but was not displaying, despite all the other data doing so. Modifying the image filename to swap the space for a hyphen and changing the fetched item name resolves the issue, though surely there's a more robust approach with larger datasets.\n\n\n\t// To-Dos:\n\t// break up this big component? (4)\n\t// assign some slight and themed bg color swap depending on planet (2)\n\t// fix all the unstructured css names (5)\n\t// prevent the current planet from loading again (1)\n\t// allow visit to any specific planet with the little bottom dots? (3)\n\n\tsetRandNum(randInte);\n\n\treturn(\n\t\t<div id='planet-box'\n\t\t\tstyle={{\n\t\t\t\tbackground: 'radial-gradient(rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.3) 90%)',\n\t\t\t\tbackgroundImage: 'url('+allImages[item.name]+')',\n\t\t\t\tbackgroundSize: 'cover'\n\t\t\t}}\n\t\t> \t\n\t\t\t<h1 id='planet-title'>{item.name === 'Yavin-IV' ? 'Yavin iv' : item.name}</h1>\n\n\t\t\t<div className='fetched'>\n\t\t\t\t<div className='fetched-keys'>\n\t\t\t\t\t{keys.map(i => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<li className='fetched-item' key={i}>{i}:</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div className='fetched-values'>\n\t\t\t\t\t{values.map(i => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<li className='fetched-item' key={i}>{i}</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div id='new-planet'>\n\t\t\t\t<Button handleClick={handleClick} id='new-planet-text' text='Visit New Planet'/>\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n\nexport default PlanetBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}