[{"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/index.js":"1","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/App.js":"2","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/reportWebVitals.js":"3","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/PlanetBox.js":"4","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/Header.js":"5","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/Button.js":"6","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/FetchedData.js":"7","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/PlanetsList.js":"8","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/WelcomeBox.js":"9"},{"size":541,"mtime":1676686314214,"results":"10","hashOfConfig":"11"},{"size":1505,"mtime":1676686314205,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1676686314214,"results":"13","hashOfConfig":"11"},{"size":2685,"mtime":1676686314214,"results":"14","hashOfConfig":"11"},{"size":414,"mtime":1676686314208,"results":"15","hashOfConfig":"11"},{"size":175,"mtime":1676686314208,"results":"16","hashOfConfig":"11"},{"size":866,"mtime":1676686314208,"results":"17","hashOfConfig":"11"},{"size":608,"mtime":1676686314214,"results":"18","hashOfConfig":"11"},{"size":591,"mtime":1676741015003,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"14arvdq",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"23"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/index.js",[],[],[],"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/App.js",[],[],"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/reportWebVitals.js",[],[],"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/PlanetBox.js",["51"],[],"import Button from './Button.js';\nimport FetchedData from './FetchedData.js';\nimport { useState, useEffect, useRef } from 'react';\n\n\nexport default function PlanetBox({ data }) {\n\tconst [index, setIndex] = useState(0)\n\tconst imageRef = useRef();\n\tconst arrFill = Array.from(Array(data.length - 1)).map((e, i) => i + 1)\n\tconst indexArrRef = useRef(arrFill)\n\n\tuseEffect(() => {\n\t\tconsole.log('PlanetBox render')\n\n\t\timageRef.current.animate(\n\t\t{\n\t\t\topacity: [0, 1]\n\t\t}, 800)\n\t})\n\n\n\tfunction indexFromProxyArr(proxyArr, currentIndex) {\n\t\tlet newIndex = proxyArr[Math.floor(Math.random() * proxyArr.length)]\n\t\t\n\t\tif (newIndex === currentIndex) {\n\t\t\tnewIndex = indexFromProxyArr(proxyArr, currentIndex)\n\t\t}\n\t\tproxyArr.splice(proxyArr.indexOf(newIndex), 1)\n\n\t\treturn newIndex\n\t}\n\t\n\n\tfunction imageImport(r) {\n\t\tlet images = {}\n\t\tr.keys().forEach((item, index) => {\n\t\t\timages[item.replace('./', '').split('.')[0]] = r(item);\n\t\t});\n\t\treturn images\n\t}\n     \n\n\tfunction handleClick() {\n\t\tif (indexArrRef.current.length == 0) {\n\t\t\tindexArrRef.current = Array.from(Array(10).keys())\n\t\t}\n\n\t\tlet newIndex = indexFromProxyArr(indexArrRef.current, index)\n\t\tsetIndex(newIndex)\n\n\t\timageRef.current.animate(\n\t\t\t{\n\t\t\t\topacity: [1, 0]\n\t\t\t}, 800)\n\t}\n\n\tconst allImages = imageImport(require.context('./images/', false))\n\tconst planet = data[index]\n\n\tif (planet.name === 'Yavin IV') {\n\t\tplanet.name = 'Yavin-IV' \n\t} \n\n\t// To-Dos:\n\t\t// understand the triggering animation in useffect and how that relates to this idea from useEffect reference: If you’re not trying to synchronize with some external system, you probably don’t need an Effect. (links to \"you might not need an effect\")\n\n\t// make a component that allows navigation to a specific planet that essentially is a horizontal list of navigable planet names above the planet box. (1)\n\t\t// lift state up into a new component that will contain PlanetsList and PlanetBox. this will contain a lot of the logic currently in planetbox, because PlanetsList also needs access to this.\n\n\t// check out animation method alternatives (2)\n\n\t// assign some slight and themed bg color swap depending on planet (3)\n\n\t// fix all the unstructured css names (4)\n\t\n\n\n\treturn(\n\t\t<div className='planet-box'\n\t\t\tref={imageRef}\n\t\t> \t\n\t\t\t<img \n\t\t\t\tsrc={allImages[planet.name]} \n\t\t\t\talt={'a depiction of ' + allImages[planet.name]}\n\t\t\t\tclassName='planet-box-image'\n\t\t\t/>\n\t\t\t<h1 className='planet-title'>{planet.name === 'Yavin-IV' ? 'Yavin-iv' : planet.name}</h1>\n\n\t\t\t<FetchedData\n\t\t\t\tcurrentPlanet={planet}\n\t\t\t/>\n\n\t\t\t<div id='new-planet'>\n\t\t\t\t<Button \n\t\t\t\t\thandleClick={handleClick} \n\t\t\t\t\tid='new-planet-text' \n\t\t\t\t\ttext='Visit Random Planet'\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t</div>\n\t);\n}\n","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/Header.js",[],[],"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/Button.js",[],[],"/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/FetchedData.js",["52","53","54"],[],"export default function FetchedData({ currentPlanet }) {\n\n\tfunction getKeysAndValues(planetObject) {\n\t\tvar keys = []\n\t\tvar values = []\n\t\tObject.keys(planetObject).slice(0, -5).map((key, index) => {\n\t\t\tkeys.push(key);\n\t\t\tvalues.push(planetObject[key])\n\t\t})\n\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tkeys[i] = keys[i].replace(/_/g, ' ');\n\t\t}\n\t\treturn [keys, values]\n\t}\n\t\n\t\n\tconst keysArr = getKeysAndValues(currentPlanet)[0]\n\tconst valuesArr = getKeysAndValues(currentPlanet)[1]\n\n\tlet keys = []\n\tkeysArr.map(i => {\n\t\tkeys.push(\n\t\t\t<li className='fetched-item' key={i}>{i}:</li>\n\t\t)\n\t})\n\n\tlet values = []\n\tvaluesArr.map(i => {\n\t\tvalues.push(\n\t\t\t<li className='fetched-item' key={i}>{i}</li>\n\t\t)\n\t})\n\n\n\treturn(\n\t\t<div className='fetched'>\n\t\t\t<div className='fetched-keys'>\n\t\t\t\t{keys}\n\t\t\t</div>\n\t\t\t<div className='fetched-values'>\n\t\t\t\t{values}\n\t\t\t</div>\n\t\t</div>\n\t)\n}","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/PlanetsList.js",["55"],[],"export default function PlanetsList({ data }) {\n\n\tfunction handleClick(e) {\n\t\te.preventDefault()\n\t\t// TODO: trigger the data of the selected planet to be shown inside the PlanetBox omponent\n\t}\n\n\tconst items = []\n\tdata.map((i) => {\n\t\tif (i.name === 'Yavin IV') {\n\t\t\ti.name = 'Yavin-IV'\n\t\t}\n\n\t\titems.push(\n\t\t\t<div className='nav-div' key={i.name}>\n\t\t\t\t<a \n\t\t\t\t\thref='.planet-box'\n\t\t\t\t\tonClick={handleClick}\n\t\t\t\t>\n\t\t\t\t\t<li className='nav-name'>\n\t\t\t\t\t\t<span className='nav-item'>{i.name.toLowerCase()}</span>\n\t\t\t\t\t</li>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t)\n\t})\n\t\n\treturn(\n\t\t<div className='nav-group'>\n\t\t\t{items}\n\t\t</div>\n\t)\n}","/Users/lucasjones/Desktop/repos/Web-Development-Practice/freeCodeCamp projects/Star-Wars-Planet-Explorer/src/WelcomeBox.js",[],[],{"ruleId":"56","severity":1,"message":"57","line":44,"column":34,"nodeType":"58","messageId":"59","endLine":44,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":6,"column":59,"nodeType":"62","messageId":"63","endLine":6,"endColumn":61},{"ruleId":"60","severity":1,"message":"61","line":22,"column":16,"nodeType":"62","messageId":"63","endLine":22,"endColumn":18},{"ruleId":"60","severity":1,"message":"61","line":29,"column":18,"nodeType":"62","messageId":"63","endLine":29,"endColumn":20},{"ruleId":"60","severity":1,"message":"61","line":9,"column":15,"nodeType":"62","messageId":"63","endLine":9,"endColumn":17},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]